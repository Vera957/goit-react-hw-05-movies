{"version":3,"file":"static/js/166.022245d3.chunk.js","mappings":"uRAQaA,EAAS,WAAO,IAAD,MAClBC,GAAWC,EAAAA,EAAAA,MACXC,EAAY,oBAAGF,EAASG,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,IAE7C,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAkDC,EAAAA,EAAAA,UAAS,MAA3D,eAAOC,EAAP,KAA0BC,EAA1B,KAGMC,EAAK,UAAGL,EAAaM,IAAI,eAApB,QAA+B,GAMpCC,EAAM,mCAAG,WAAOC,GAAP,iEACXA,EAAEC,kBACFC,EAAAA,EAAAA,IAAcL,GAAOM,MAAK,SAAAC,GAAG,OACzBR,EAAqBQ,EAAIC,KAAKC,QADL,IAFlB,2CAAH,sDAgBZ,OATAC,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACRV,IACAK,EAAAA,EAAAA,IAAa,UAACV,EAAaM,IAAI,eAAlB,QAA6B,IAAIK,MAAK,SAAAC,GAAG,OAClDR,EAAqBQ,EAAIC,KAAKC,QADoB,GAG7D,GAAE,CAACd,EAAcK,KAIV,iCACJ,SAAC,KAAD,CAAmBW,GAAIpB,EAAvB,mBACA,kBAAMqB,SAAUV,EAAhB,WACI,SAAC,KAAD,CACIW,KAAK,QACLC,KAAK,OACLC,MAAK,OAAEf,QAAF,IAAEA,EAAAA,EAAS,GAChBgB,SAAU,SAAAb,GAAC,OA3BJc,EA2BkBd,EAAEe,OAAOH,WA1B1CnB,EAAwB,KAARqB,EAAa,CAAC,EAAI,CAAEH,KAAMG,IAD5B,IAACA,CA2BI,KAIf,SAAC,KAAD,yBAEJ,SAAC,EAAAE,GAAD,UACKrB,GACGA,EAAkBsB,KAAI,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,YAAaC,EAAvB,EAAuBA,aAAcC,EAArC,EAAqCA,GAArC,OAClB,SAAC,KAAD,WACI,UAAC,KAAD,CAAMb,GAAE,kBAAaa,GAAehC,MAAO,CAAEC,KAAMJ,GAAnD,WACI,gBAAKoC,IAAG,yCAAoCH,GAAeI,IAAKL,KAChE,wBAAKA,KACL,uBAAIE,MAHwBC,IADnBA,EADC,QAWrC,EAED,W","sources":["components/Movies/Movies.js"],"sourcesContent":["//search page\n\nimport { Link, useSearchParams, useLocation } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport { searchDataGet } from \"components/common/Common\";\nimport { Ul, LinkStyled, Input, Button, NavLinkStyledMini } from \"style/ComponentsStyled\";\n\n\nexport const Movies = () => {\n    const location = useLocation();\n    const backLinkHref = location.state?.from ?? \"/\";\n\n    const [searchParams, setSearchParams] = useSearchParams();\n    const [queryDataResponse, setqueryDataResponse] = useState(null);\n\n\n    const query = searchParams.get('name') ?? '';\n\n    const setSearch = (val) => {\n        setSearchParams(val === '' ? {} : { name: val })\n    }\n\n    const search = async (e) => {\n        e.preventDefault();\n        searchDataGet(query).then(res =>\n            setqueryDataResponse(res.data.results)\n        )\n    }\n\n    useEffect(() => {\n        if (query)\n            searchDataGet(searchParams.get('name') ?? '').then(res =>\n                setqueryDataResponse(res.data.results)\n            )\n    }, [searchParams, query])\n\n\n\n    return (<>\n        <NavLinkStyledMini to={backLinkHref}>back</NavLinkStyledMini>\n        <form onSubmit={search}>\n            <Input\n                type='input'\n                name='name'\n                value={query ?? ''}\n                onChange={e => setSearch(e.target.value)}\n            >\n            </Input>\n\n            <Button >Search</Button>\n        </form>\n        <Ul>\n            {queryDataResponse && (\n                queryDataResponse.map(({ title, poster_path, release_date, id }) =>\n                    <LinkStyled key={id}>\n                        <Link to={`/movies/${id}`} key={id} state={{ from: location }} >\n                            <img src={`https://image.tmdb.org/t/p/w500${poster_path}`} alt={title} />\n                            <h3>{title}</h3>\n                            <p>{release_date}</p>\n                        </Link>\n                    </LinkStyled>)\n            )}\n        </Ul>\n    </>)\n}\n\nexport default Movies;"],"names":["Movies","location","useLocation","backLinkHref","state","from","useSearchParams","searchParams","setSearchParams","useState","queryDataResponse","setqueryDataResponse","query","get","search","e","preventDefault","searchDataGet","then","res","data","results","useEffect","to","onSubmit","type","name","value","onChange","val","target","Ul","map","title","poster_path","release_date","id","src","alt"],"sourceRoot":""}